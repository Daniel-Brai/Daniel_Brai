---
import type { CollectionEntry } from "astro:content";
import DateTime from "@/components/DateTime.astro";
import Comments from "@/components/Comments.astro";
import ShareArticleButton from "@/components/ShareArticleButton.astro";
import Tag from "@/components/Tag.astro";
import $getReadingTime from "@/utils/getReadingTime";
import { slugifyStr } from '@/utils/slugify';
import Layout from "./BaseLayout.astro";
import { SITE_TITLE, SITE_CDN } from "../consts";
import type { HeadTags } from '../types';

import "@/styles/post.css";

export interface Props {
  post: CollectionEntry<"posts">;
}

const { post } = Astro.props;

const minutesRead = $getReadingTime(post.body);

const {
  title,
  author,
  description,
  heroImage,
  publishedAt,
  updatedAt,
  tags,
} = post.data;

const slug = slugifyStr(title) || post.slug;

const { Content } = await post.render();

const ogImage = SITE_CDN + heroImage;

const ogUrl = new URL(`/posts/${slug}`, Astro.url.origin).href;

const data: HeadTags = {
  title: `${title} - ${SITE_TITLE}`,
  description: `${description}`,
  og: {
    title: `${title} - ${SITE_TITLE}`,
    description: `${description}`,
    image: ogImage,
  },
}
---

<Layout {...data}>
  <main>
    <div class="relative">
      <button 
        onclick="document.querySelector('html').scrollIntoView({ behaviour: 'smooth' })" 
        title="Scroll to top" 
        id="stt-btn"
        class="p-1 border border-gray-800 dark:border-white fixed bottom-10 right-2 sm:right-4 md:right-10 z-20 rounded-lg"
      >
        <svg class="dark:fill-white" xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path d="M13 18v-6h5l-6-7-6 7h5v6z"/></svg>
      </button>
      <button
        class="focus-outline mt-8 mb-3 flex items-center hover:opacity-75"
        onclick="history.back()"
      >
        <svg
          class="dark:fill-white"
          width="24"
          height="24"
          xmlns="http://www.w3.org/2000/svg"
          ><path
            d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
          ></path>
        </svg>
        <span>Go back</span>
      </button>
      <section id="main-content">
        <h1 class="post-title">{title}</h1>
        <div class="flex flex-col space-y-2">
          <div>
            <p class="text-sm" title={`Published by ${author}`}>
              By
              <span class="underline underline-offset-2">
                {author}
              </span>
            </p>
          </div>
          <div class="mt-2 flex items-center space-x-2">
            <div>
              {
                !updatedAt ? (
                  <DateTime
                    date={publishedAt}
                    otherClasses={"text-xs sm:text-sm cursor-pointer"}
                    label={`Published on ${publishedAt.toLocaleDateString(
                      "en-GB",
                      {
                        year: "numeric",
                        month: "short",
                        day: "numeric",
                      }
                    )}`}
                  />
                ) : (
                  <DateTime
                    date={updatedAt}
                    otherClasses={"text-xs sm:text-sm cursor-pointer"}
                    label={`Updated on ${publishedAt.toLocaleDateString("en-GB", {
                      year: "numeric",
                      month: "short",
                      day: "numeric",
                    })}`}
                  />
                )
              }
            </div>
            <span>~</span>
            <div class="flex items-center space-x-2">
              <svg
                class="dark:fill-white"
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                ><path
                  d="M21 3h-7a2.98 2.98 0 0 0-2 .78A2.98 2.98 0 0 0 10 3H3a1 1 0 0 0-1 1v15a1 1 0 0 0 1 1h5.758c.526 0 1.042.214 1.414.586l1.121 1.121c.009.009.021.012.03.021.086.079.182.149.294.196h.002a.996.996 0 0 0 .762 0h.002c.112-.047.208-.117.294-.196.009-.009.021-.012.03-.021l1.121-1.121A2.015 2.015 0 0 1 15.242 20H21a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zM8.758 18H4V5h6c.552 0 1 .449 1 1v12.689A4.032 4.032 0 0 0 8.758 18zM20 18h-4.758c-.799 0-1.584.246-2.242.689V6c0-.551.448-1 1-1h6v13z"
                ></path></svg
              >
              <span class="text-xs sm:text-sm">{minutesRead}</span>
            </div>
          </div>
        </div>
        <div class="mt-5">
          <img class="w-full h-[200px] sm:h-[400px] object-cover" src={ogImage} alt={`${title} image`} loading="eager" />
          <div class="mt-4 flex flex-col justify-center space-y-2"></div>
        </div>
        <article id="article" role="article" class="mt-8 post">
          <Content />
        </article>

        <div class="mt-5">
          <p>Tags: </p>
          <ul class="tags-container unset">
            {tags.map((tag) => <Tag name={tag} />)}
          </ul>
        </div>
        <div id="share-section" class="mb-4">
          <ShareArticleButton 
            title={title} 
            author={"daniel_brai"} 
            description={description} 
            url={ogUrl}
            siteName={"Daniel Brai | Blog"}
          />
        </div>
      </section>
      <section class="my-8" id="comments">
        <div class="mt-6">
          <Comments />
        </div>
      </section>
    </div>
  </main>
</Layout>

<script is:inline>
  const ps = document.querySelectorAll("p");
  const h2s = document.querySelectorAll("h2");
  const ss = document.querySelector('#share-section')
  const details = document.querySelector("article > details");
  const tocc = document.querySelector("details > summary");
  const toch = document.querySelector("#table-of-contents");
  const code_containers = document.querySelectorAll("pre");
  const code_blocks = document.querySelectorAll("pre code");

  const copybtns = document.querySelectorAll(".code-copy-btn");
  const copyIcon =
    '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#FFFFFF"><path d="M20 2H10c-1.103 0-2 .897-2 2v4H4c-1.103 0-2 .897-2 2v10c0 1.103.897 2 2 2h10c1.103 0 2-.897 2-2v-4h4c1.103 0 2-.897 2-2V4c0-1.103-.897-2-2-2zM4 20V10h10l.002 10H4zm16-6h-4v-4c0-1.103-.897-2-2-2h-4V4h10v10z"/></svg>';
  const checkIcon =
    '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#00FF00"><path d="m10 15.586-3.293-3.293-1.414 1.414L10 18.414l9.707-9.707-1.414-1.414z"/></svg>';

  code_blocks.forEach((cb) => {
    cb.style.fontFamily = "Roboto mono";
    cb.style.fontSize = "14px";
    cb.style.position = "relative";
    cb.style.top = "-16px";
  });

  // let isCopied = false;
  copybtns.forEach((copybtn) => {
    if (copybtn !== null) {
      copybtn.addEventListener("click", async () => {
        let div = copybtn.parentNode;
        // isCopied = true;
        const range = document.createRange();
        range.selectNode(div);
        window.getSelection().addRange(range);

        if (navigator.clipboard) {
          try {
            await navigator.clipboard.writeText(range.toString());
            copybtn.innerHTML = checkIcon;
          } catch (e) {
            console.error(e);
          }
        } else {
          document.execCommand("copy");
        }
        window.getSelection().removeAllRanges();

        setTimeout(() => {
          // isCopied = false;
          copybtn.innerHTML = copyIcon;
        }, 1500);
      });
    }
  });

  code_containers.forEach((cc) => {
    cc.style.borderRadius = "12px";
    cc.classList.add('select-none')
  });

  ps.forEach((p) => {
    p.style.marginBottom = "16px";
  });

  h2s.forEach((h) => {
    h.style.marginBottom = "6px";
    h.style.fontSize = "24px";
    h.style.fontWeight = "500";
  });

  if (details != null) {
    details.style.marginBottom = "24px";
  }

  if (tocc != null) {
    tocc.textContent = "Table of contents";
  }

  if (toch != null) {
    toch.style.display = "none";
  }

  if (ss !== null) {
    function callback(entries, observer) {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          document.querySelector('#stt-btn').classList.toggle('hidden');
        } else {
          document.querySelector('#stt-btn').classList.toggle('hidden');
        }
      })
    }
    let observer = new IntersectionObserver(callback);
    observer.observe(ss)
  }
</script>
<style>
  html, body {
    @apply scroll-smooth;
  }
  details {
    padding: 4px 8px;
    background-color: #171717;
  }
  .post-title {
    @apply mb-6 text-4xl font-semibold;
  }
  .tags-container {
    @apply my-4;
  }
  img {
    @apply mb-5 rounded-lg;
  }
</style>
