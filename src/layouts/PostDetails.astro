---
import BaseHead from "../components/BaseHead.astro";
import Comments from "../components/Comments.astro";
import DateTime from "../components/DateTime.astro";
import LinkButton from "../components/LinkButton.astro";
import PageLayout from "./PageLayout.astro";
import Tag from "../components/Tag.astro";

import type { CollectionEntry } from "astro:content";
import $getReadingTime from "../utils/getReadingTime";

export interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

const minutesRead = $getReadingTime(post.body);

const {
  title,
  author,
  authorImg,
  description,
  heroImage,
  pubDate,
  postSlug,
  updatedDate,
  tags,
} = post.data;

const slug = postSlug || post.slug;

const { Content } = await post.render();

const ogUrl = new URL(`/blog/${slug}`, Astro.url.origin).href;
---

<PageLayout>
  <BaseHead title={`${title} | Blog - Daniel Brai`} description={description} />
  <Fragment slot="main">
    <main id="main">
      <div class="relative">
        <button
          class="focus-outline mt-8 mb-3 flex items-center hover:opacity-75"
          onclick="history.back()"
        >
          <svg
            class="dark:fill-white"
            width="24"
            height="24"
            xmlns="http://www.w3.org/2000/svg"
            ><path
              d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
            ></path>
          </svg>
          <span>Go back</span>
        </button>
        <section id="main-content">
          <h1 class="post-title">{title}</h1>
          <div class="flex flex-col space-y-2">
            <div>
              <p class="text-sm sm:text-lg">
                By
                <LinkButton href="/about" title={`Published by ${author}`}>
                  <span class="underline underline-offset-2">
                    {author}
                  </span>
                </LinkButton>
              </p>
            </div>
            <div class="mt-2 flex items-center space-x-2">
              <div>
                {
                  !updatedDate ? (
                    <DateTime
                      date={pubDate}
                      otherClasses={"text-xs sm:text-sm cursor-pointer"}
                      label={`Published on ${pubDate.toLocaleDateString(
                        "en-GB",
                        {
                          year: "numeric",
                          month: "short",
                          day: "numeric",
                        }
                      )}`}
                    />
                  ) : (
                    <DateTime
                      date={updatedDate}
                      otherClasses={"text-xs sm:text-sm cursor-pointer"}
                      label={`Updated on ${pubDate.toLocaleDateString("en-GB", {
                        year: "numeric",
                        month: "short",
                        day: "numeric",
                      })}`}
                    />
                  )
                }
              </div>
              <span>~</span>
              <div class="flex items-center space-x-2">
                <svg
                  class="dark:fill-white"
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  ><path
                    d="M21 3h-7a2.98 2.98 0 0 0-2 .78A2.98 2.98 0 0 0 10 3H3a1 1 0 0 0-1 1v15a1 1 0 0 0 1 1h5.758c.526 0 1.042.214 1.414.586l1.121 1.121c.009.009.021.012.03.021.086.079.182.149.294.196h.002a.996.996 0 0 0 .762 0h.002c.112-.047.208-.117.294-.196.009-.009.021-.012.03-.021l1.121-1.121A2.015 2.015 0 0 1 15.242 20H21a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zM8.758 18H4V5h6c.552 0 1 .449 1 1v12.689A4.032 4.032 0 0 0 8.758 18zM20 18h-4.758c-.799 0-1.584.246-2.242.689V6c0-.551.448-1 1-1h6v13z"
                  ></path></svg
                >
                <span class="text-xs sm:text-sm">{minutesRead}</span>
              </div>
            </div>
          </div>
          <div class="mt-5">
            <img src={heroImage} alt="Article's Hero Image" loading="eager" />
            <div class="mt-4 flex flex-col justify-center space-y-2"></div>
          </div>
          <article id="article" role="article" class="mt-8">
            <Content />
          </article>

          <ul class="tags-container unset">
            {tags.map((tag) => <Tag name={tag} />)}
          </ul>
        </section>
        <section class="my-8" id="comments">
          <Comments />
        </section>
      </div>
    </main>
  </Fragment>
</PageLayout>

<script is:inline>
  const ps = document.querySelectorAll("p");
  const h2s = document.querySelectorAll("h2");
  const details = document.querySelector("article > details");
  const tocc = document.querySelector("details > summary");
  const toch = document.querySelector("#table-of-contents");
  const code_containers = document.querySelectorAll("pre");
  const code_blocks = document.querySelectorAll("pre code");

  let isCopied = false;
  const copybtns = document.querySelectorAll(".code-copy-btn");
  const copyIcon =
    '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#FFFFFF"><path d="M20 2H10c-1.103 0-2 .897-2 2v4H4c-1.103 0-2 .897-2 2v10c0 1.103.897 2 2 2h10c1.103 0 2-.897 2-2v-4h4c1.103 0 2-.897 2-2V4c0-1.103-.897-2-2-2zM4 20V10h10l.002 10H4zm16-6h-4v-4c0-1.103-.897-2-2-2h-4V4h10v10z"/></svg>';
  const checkIcon =
    '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#00FF00"><path d="m10 15.586-3.293-3.293-1.414 1.414L10 18.414l9.707-9.707-1.414-1.414z"/></svg>';

  code_blocks.forEach((cb) => {
    cb.style.fontFamily = "Roboto mono";
    cb.style.fontSize = "16px";
    cb.style.position = "relative";
    cb.style.top = "-16px";
    cb.classList.add('no-select');
  });

  copybtns.forEach((copybtn) => {
    if (copybtn !== null) {
      copybtn.addEventListener("click", async () => {
        let div = copybtn.parentNode;
        isCopied = true;
        const range = document.createRange();
        range.selectNode(div);
        window.getSelection().addRange(range);

        if (!navigator.clipboard) {
          document.execCommand("copy");
        } else {
          try {
            await navigator.clipboard.writeText(range.toString());
            copybtn.innerHTML = checkIcon;
          } catch (e) {
            console.error(e);
          }
        }
        window.getSelection().removeAllRanges();

        setTimeout(() => {
          isCopied = false;
          copybtn.innerHTML = copyIcon;
        }, 1500);
      });
    }
  });

  code_containers.forEach((cc) => {
    cc.style.borderRadius = "12px";
    cc.classList.add('no-select');
  });

  ps.forEach((p) => {
    p.style.marginBottom = "16px";
  });

  h2s.forEach((h) => {
    h.style.marginBottom = "6px";
    h.style.fontSize = "24px";
    h.style.fontWeight = "500";
  });

  if (details != null) {
    details.style.marginBottom = "24px";
  }

  if (tocc != null) {
    tocc.textContent = "Table of contents";
  }

  if (toch != null) {
    toch.style.display = "none";
  }
</script>
<style>
  details {
    padding: 4px 8px;
    background-color: #171717;
  }
  .post-title {
    @apply mb-6 text-4xl font-semibold;
  }
  .tags-container {
    @apply my-8;
  }
  img {
    @apply mb-5 rounded-lg;
  }
</style>
