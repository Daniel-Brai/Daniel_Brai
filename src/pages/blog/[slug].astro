---
import { CollectionEntry, getCollection } from "astro:content";
import BaseHead from "../../components/BaseHead.astro";
import Posts from "../../components/Posts.astro";
import PageLayout from "../../layouts/PageLayout.astro";
import PostDetails from "../../layouts/PostDetails.astro";
import getSortedPosts from "../../utils/getSortedPosts";
import getPageNumbers from "../../utils/getPageNumber";
import { slugifyPost } from "../../utils/slugify";
import { SITE_TITLE, POSTS_PER_PAGE } from "../../consts";

export interface Props {
  post: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const posts = await getCollection("blog", ({ data }) => !data.draft);

  const postResult = posts.map((post) => ({
    params: { slug: slugifyPost(post.data) },
    props: { post },
  }));

  const pagePaths = getPageNumbers(posts.length).map((pageNum) => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const posts = await getCollection("blog");

const sortedPosts = getSortedPosts(posts);

const totalPages = getPageNumbers(sortedPosts.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * POSTS_PER_PAGE;
const startPost = lastPost - POSTS_PER_PAGE;

const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

{
  post ? (
    <PostDetails post={post} />
  ) : (
    <PageLayout>
      <BaseHead
        title={`Blog | ${SITE_TITLE}`}
        description={
          "A repository of all the things I love as an aspiring Software Engineer"
        }
      />
      <Fragment slot="main">
        <Posts
          posts={paginatedPosts}
          pageNum={currentPage}
          totalPages={totalPages.length}
        />
      </Fragment>
    </PageLayout>
  )
}
