---
import type { HeadTags } from '@/types';
import * as astro from "astro:content";
import Posts from "@/components/Posts.astro";
import Layout from "@/layouts/BaseLayout.astro";
import PostDetails from "@/layouts/PostDetails.astro";
import getSortedPosts from "@/utils/getSortedPosts";
import getPageNumbers from "@/utils/getPageNumber";
import { slugifyPost } from "@/utils/slugify";
import { SITE_TITLE, SITE_CDN, POSTS_PER_PAGE } from "../../consts";

export interface Props {
  post: astro.CollectionEntry<"posts">;
}

export async function getStaticPaths() {
  const posts = await astro.getCollection("posts", ({ data }) => !data.isDraft);

  const postResult = posts.map((post) => ({
    params: { slug: slugifyPost(post.data) },
    props: { post },
  }));

  const pagePaths = getPageNumbers(posts.length).map((pageNum) => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const posts = await astro.getCollection("posts");

const sortedPosts = getSortedPosts(posts);

const totalPages = getPageNumbers(sortedPosts.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * POSTS_PER_PAGE;
const startPost = lastPost - POSTS_PER_PAGE;

const paginatedPosts = sortedPosts.slice(startPost, lastPost);

const data: HeadTags = {
  title: `Posts - ${SITE_TITLE}`,
  description: "Mastering Software Engineering one post at a time",
  og: {
    title: `Posts - ${SITE_TITLE}`,
    description: "Mastering Software Engineering one post at a time",
    image: "/daniel-brai-posts.png",
  },
}
---

{
  post ? (
    <PostDetails post={post} />
  ) : (
    <Layout {...data}>
      <main>
        <Posts
          posts={paginatedPosts}
          pageNum={currentPage}
          totalPages={totalPages.length}
        />
      </main>
    </Layout>
  )
}
